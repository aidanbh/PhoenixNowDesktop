/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package phoenixnowdesktop;

import java.awt.SystemTray;
import java.io.File;
import java.io.IOException;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.naming.OperationNotSupportedException;

/**
 *
 * @author aidanhunt
 */
public class PhoenixNowWindow extends java.awt.Frame {

    private BackendHtmlUnit theBackend;

    private SysTrayIcon ti;
    
    // the server always operates in EST/EDT
    private final ZoneId server_time = ZoneId.of("America/New_York");

    /**
     * Creates new form PhoenixNowWindow
     */
    public PhoenixNowWindow() {
        initComponents(); // autogenerated by NetBeans
        // use environment vars here for runtime authentication
        this.theBackend = new BackendHtmlUnit(
                // since ECG is the only know install of the server, default to that domain
                (System.getenv("PHOENIXNOW_HOST") == null ?
                        "phoenixnow.org" :
                        System.getenv("PHOENIXNOW_HOST")),
                System.getenv("PHOENIXNOW_EMAIL"),
                System.getenv("PHOENIXNOW_PASSWORD")
        );
        
        System.out.println(System.getenv());

        ti = SysTrayIcon.registerSysTrayIcon(this);

        // try to set an icon
        try {
            super.setIconImage(ImageIO.read(new File("phoenixnowlogo.png")));
        } catch (IOException e) {
            /* d */ System.out.println("Info: couldn't set icon correctly...");
        }

        // get the initial state
        this.doSignIn();

    }

    // these methods are package private so the SysTrayIcon object can talk to them
    // this is the ONLY way that the user can initiate a signin attempt
    // everything must pass the buck to this so everything can be updated correctly
    void doSignIn() {
        // do the sign in
        this.theBackend.attemptSignIn();

        // update our own stuff
        this.isSignedInCheckBox.setState(this.theBackend.isSignedIn());

        // update our ti -- abstract what it's actually doing
        ti.updateSignInState(this.theBackend.isSignedIn());
        
        // register/deregister retry timers
        // BackendHtmlUnit handles preventing the "forgetting" of a signed in state
        // NB: per javadoc, it doesn't matter that refs to these go out of scope
        //  GC knows not to destroy them until all tasks are finished 
        if(this.theBackend.isSignedIn()){
            // don't need to turn off the retry timers
            // just don't turn them back on here
            
            // but, schedule this to run at 5am for new day reload
            System.out.println("Will refresh interface at 5AM tomorrow.");
            (new Timer()).schedule(new DSITask(), Date.from(
                    ZonedDateTime.now(this.server_time)
                            .truncatedTo(ChronoUnit.DAYS)
                            .plusDays(1)
                            .plusHours(5)
                            .toInstant()
            ));
        } else {
            // turn on a a retry timer -- just one, as this code will run again
            System.out.println("Trying again in 5 minutes");
            (new Timer()).schedule(new DSITask(), Date.from(
                    ZonedDateTime.now(this.server_time)
                            .plusMinutes(5)
                            .toInstant()
            ));
        }
    }

    // this is used in SysTrayIcon's initial setup
    boolean askIsSignedIn() {
        return this.theBackend.isSignedIn();
    }

    void showMe() {
        // workaround for not coming to front
        super.setVisible(false);
        super.setVisible(true);
        super.toFront();
    }
    
    // task to schedule doSignIn() call
    private class DSITask extends TimerTask {
        @Override
        public void run() {
            doSignIn();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        welcomeLabel = new java.awt.Label();
        signInNowButton = new java.awt.Button();
        isSignedInCheckBox = new java.awt.Checkbox();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        welcomeLabel.setName(""); // NOI18N
        welcomeLabel.setText("Welcome to PhoenixNow Desktop!");
        add(welcomeLabel, java.awt.BorderLayout.NORTH);

        signInNowButton.setLabel("Sign In Now...");
        signInNowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signInNowButtonActionPerformed(evt);
            }
        });
        add(signInNowButton, java.awt.BorderLayout.SOUTH);

        isSignedInCheckBox.setEnabled(false);
        isSignedInCheckBox.setLabel("Are You Signed In???");
        isSignedInCheckBox.setName(""); // NOI18N
        add(isSignedInCheckBox, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        // do NOT exit here! (if the TrayIcon is supported)
        if (SystemTray.isSupported()) {
            // just hide it!
            this.setVisible(false);
        } else {
            System.exit(0); // force quits even if timers are running
        }
    }//GEN-LAST:event_exitForm

    private void signInNowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signInNowButtonActionPerformed
        // TODO add your handling code here:
        this.doSignIn();
    }//GEN-LAST:event_signInNowButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PhoenixNowWindow().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Checkbox isSignedInCheckBox;
    private java.awt.Button signInNowButton;
    private java.awt.Label welcomeLabel;
    // End of variables declaration//GEN-END:variables
}
